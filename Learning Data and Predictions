setwd("~/Users/jared/ASD_CSV_FILES")
library(MASS)
library(stats)
library(data.table)
library(readxl)
library(dplyr)


file.list <- list()
list_of_file_names <- c("2016_17_NSCH_Topical_Implicate_CAHMI_DRCv2.csv", "2018-2019_NSCH_Topical_CAHMI_DRCv2.csv")
for(name in list_of_file_names){
    file_path <- file.path(getwd(), name)
    file.list[[name]] <-data.table::fread(file_path)
}

#make a data frame of codes and their category
COMORBIDITY <- c("K2Q34A", "K2Q34B", "K2Q36A", "K2Q36B", "K2Q60A", "K2Q60B", "K2Q37A", "K2Q37B",
                 "K2Q30A", "K2Q30B", "K2Q31A", "K2Q31B")

RESIDENCE <- c("LIVEUSA_MO", "K11Q43R")

DEMOGRAPHIC <- c("SC_RACER", "SC_HISPANIC_R", "HOUSE_GEN", "A1_GRADE", "A2_GRADE", "HHLANGUAGE", "SC_AGE_YEARS", "SC_SEX")

outputs <- c("K2Q35A", "K2Q35B")

codes <- c(COMORBIDITY, RESIDENCE, DEMOGRAPHIC, outputs)

descriptions <- c("Behavior Problems", "Behavior Problems Currently", "Developmental Delay", "Developmental Delay Currently",
                    "Intellectual Disability", "Intellectual Disability Currently",
                  "Speech Disorder", "Speech Disorder Currently", "Learning Disability", "Learning Disability Currently",
                  "ADD/ADHD", "ADD/ADHD Currently",
                  "How Long Living in the United States - Years", "How Many Times Moved to New Address", "Race of Selected Child, Recode",
                  "Hispanic Origin of Selected Child, Recode", "Parental Nativity", "Adult 1 - Highest Completed Year of School", "Adult 2 - Highest Completed Year of School",
                  "Primary HH Language", "Age of Seleced Child - In Years", "Sex of Selected Child", "Autism ASD", "Autism ASD Currently")

code_dictionary <- setNames(descriptions, codes)
categories <- rep(c("COMORBIDITY", "RESIDENCE", "DEMOGRAPHIC"), c(length(COMORBIDITY), length(RESIDENCE), length(DEMOGRAPHIC)))


#creating learning.codes table
learning.codes <- data.table()
for(file_name in names(file.list)){
  subset_data <- file.list[[file_name]][, ..codes]

  new_data <- data.table(matrix(NA, nrow = nrow(file.list[[file_name]]), ncol = length(codes)))
                         setnames(new_data, codes)

  new_data[, (codes) := subset_data]

  learning.codes <- rbindlist(list(learning.codes, new_data), fill = TRUE)

}

#one-hot columns
one_hotted_data <- copy(learning.codes)
variable.list <- list()

#subset if don't want to one-hot certain columns

columns.to.encode <- codes[!codes %in% "SC_AGE_YEARS"]
for(col.name in columns.to.encode) {

  unique_values <- unique(one_hotted_data[[col.name]])

  for(value in unique_values) {

    if(!is.na(value)) {

      new.col.name <- paste(col.name, value, sep = "_")

      variable.list[[new.col.name]] <- new.col.name

      one_hotted_data[, (new.col.name) := as.integer(one_hotted_data[[col.name]] == value)]
    }
  }
}

#add #a year column 
nrow(fil.list[[1])
one_hotted_data[, Year := ifelse(.I <= nrow(file.list[[1]], "2016 - 2017", "2018-2019")]

#assigning folds

OneFold <- function(data, k, test_fold) {
  n_rows <- nrow(data)

  set.seed(123)

  data[, Fold := sample(rep(1:k, l = .N))]

  data[, Set := ifelse(Fold == test_fold, "test", "train")]

  return(data)

}
# Example usage
install.packages('glmnet')
library(glmnet)

n.folds <- 3
main.autism.output.column.name <- "K2Q35A_1"
autism.outputs.list <- c("K2Q35A_2", "K2Q35A_1", "K2Q35A_99", "K2Q35B_95", "K2Q35B_1", "K2Q35B_99", "K2Q35B_2")
input.columns <- one_hotted_data[, !c(codes, autism.outputs.list, "Year", "Fold", "Set"), with = FALSE]
output.column <- one_hotted_data[["K2Q35A_1"]]

#How do I get a featureless model
glm.model.list <- list()
for(test_fold in 1:n.folds){
  folded_data <- OneFold(one_hotted_data, n.folds, test_fold)
  train.set <- folded_data[i = Set == "train"]
  test.set <- folded_data[i = Set == "test"]
  train.inputs <- train.set[, names(input.columns), with = FALSE]
  test.inputs <- test.set[,names(input.columns), with = FALSE]
  train.output <- train.set[, "K2Q35A_1", with = FALSE]
  train.double.input <- as.matrix(train.inputs)
  train.double.output <- as.matrix(train.output)
  test.double.input <- as.matrix(test.inputs)
  my.model.for.fold.k <- cv.glmnet(train.double.input, train.double.output)
  glm.model.list[[test_fold]] <- my.model.for.fold.k
}



#predictions
library(glmnet)
n.algorithms <- 2
n.predictions <- n.folds * n.algorithms
glm.predictions.list <- list()
glm.accuracies.list <- list()
featureless.predictions.list <- list()
featureless.accuracies.list <- list()

#Predictions greater than 0.3 rounded up to 1

for(fold in 1:n.folds){
  glm.prediction <- predict(glm.model.list[[fold]], test.double.input)
  glm.prediction <- ifelse(glm.prediction > 0.3, 1, glm.prediction)
  glm.prediction <- ifelse(glm.prediction < 0.3, 0, glm.prediction)
  glm.predictions.list[[fold]] <- glm.prediction

}

#Featureless Data
most.frequent.class <- train.output[, .(count=.N), by = main.autism.output.column.name][order(-count)][[main.autism.output.column.name]][1]
featureless.list <- list()
for(fold in 1:n.folds){
  featureless <- folded_data[i = Fold == fold]
  output <- featureless[["K2Q35A_1"]]
  featureless.list[[fold]] <- output
}

all.predictions.list <- cbind(glm.predictions.list, featureless.list)

#True Autism Rate
instances.autism <- train.output[, .(count=.N), by = main.autism.output.column.name]$count[[2]]
instances.no.autism <- train.output[, .(count=.N), by = main.autism.output.column.name]$count[[1]]
true.rate <- instances.autism/instances.no.autism
print(true.rate)

#featureless rate = 0.028


#code works up until here, error in the following block

test.accuracies.list <- list()
for (prediction in all.predictions.list){
  count_ones <- sum(all.predictions.list[[prediction]] == 1)
  predicted.rate <- count_ones / nrow(all.predictions.list[[prediction]])
  test.accuracy <- predicted.rate / true.rate
  test.accuracies.list[[prediction]] <- test.accuracy

}


#making a data table for plotting

algorithm <- list("cv.glmnet", "featureless")
test.accuracy.dt <- DT["Test Accuracy", "Algorithm"]

ggplot(aes( x = test.accuracy , y = algorithm)) +
  geom_point
  labels( xlab = "Test Accuracy", ylab = "Algorithm")





